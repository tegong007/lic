name: Build and Release Electron App

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
#    runs-on: [self-hosted,Linux,ARM64]
    strategy:
      matrix:
        # architecture: [ arm64 ]  # 指定 ARM 架构
        architecture: [ x64 ]  # 指定 ARM 架构

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install pnpm
        run: |
          npm install -g pnpm
          echo "$(npm bin -g)" >> $GITHUB_PATH

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Ruby and fpm
        run: |
          sudo apt update
          sudo apt install ruby -y
          sudo gem install fpm

      - name: Build the Electron app
        env:
          USE_SYSTEM_FPM: "true"
        run: pnpm run build:linux

      - name: Build the Electron app
        run: pnpm run build:linux

      - name: Upload Specific Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ds-ic-app-${{ github.ref_name }}
          path: |
            ./dist/*
            !**/linux-unpacked/**  # 排除 linux-unpacked 目录

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ds-ic-app-${{ github.ref_name }}
          path: dist
          retention-days: 1

      - name: Compress direct files in dist
        run: |
          cd dist
          find . -maxdepth 1 -type f -exec zip ../release-${{ github.ref_name }}.zip {} +
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} release-${{ github.ref_name }}.zip \
            --generate-notes \
            --title "Release ${{ github.ref_name }}"
